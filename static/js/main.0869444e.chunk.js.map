{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","blankGrid","createGrid","useState","grid","setGrid","isMousePressed","setIsMousePressed","Math","floor","window","innerHeight","innerWidth","startingNode","setStartingNode","endingNode","setEndingNode","isMovingStart","setIsMovingStart","isMovingEnd","setIsMovingEnd","grids","i","row","j","push","col","isWall","isStart","isEnd","createNode","node","className","id","concat","style","width","height","border","display","justifyContent","alignItems","onMouseDown","anime","targets","document","getElementById","scale","value","easing","duration","background","borderRadius","newGrid","curNode","onMouseEnter","onMouseUp","backgroundColor","position","overflow","Button","variant","color","onClick","delay","stagger","map","flexDirection","renderGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0869444e.chunk.js","sourcesContent":["import './App.css';\r\nimport anime from 'animejs/lib/anime.es.js';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button } from '@material-ui/core'\r\n\r\nfunction App() {\r\n\r\n  const blankGrid = createGrid()\r\n  const [grid, setGrid] = useState(createGrid())\r\n  const [isMousePressed, setIsMousePressed] = useState(false)\r\n  const [startingNode, setStartingNode] = useState([Math.floor((window.innerHeight - 200) / 40), Math.floor(window.innerWidth / 80)])\r\n  const [endingNode, setEndingNode] = useState([Math.floor((window.innerHeight - 200) / 40), Math.floor(window.innerWidth * 3 / 80)])\r\n  const [isMovingStart, setIsMovingStart] = useState(false)\r\n  const [isMovingEnd, setIsMovingEnd] = useState(false)\r\n\r\n  function createGrid() {\r\n    var grids = []\r\n    for (var i = 0; i < Math.floor((window.innerHeight - 200) / 20); i++) {\r\n      var row = []\r\n      for (var j = 0; j < Math.floor(window.innerWidth / 20); j++) {\r\n        row.push({\r\n          row: i,\r\n          col: j,\r\n          isWall: false,\r\n          isStart: false,\r\n          isEnd: false\r\n        })\r\n      }\r\n      grids.push(row)\r\n    }\r\n    return grids\r\n  }\r\n\r\n  function renderGrid(grid) {\r\n    return (\r\n      <div>\r\n        {grid.map((row) => {\r\n          return (\r\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n              {row.map(node => {\r\n                return createNode(node)\r\n              })}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function createNode(node) {\r\n    return (\r\n      <div\r\n        className='node'\r\n        id={\"node\".concat(Math.floor(window.innerWidth / 20) * node.row + node.col)}\r\n        style={{ width: 18, height: 18, border: '1px solid #7DEDFF', display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n        onMouseDown={() => {\r\n          if ((node.row === startingNode[0] && node.col === startingNode[1])) {\r\n            setIsMovingStart(true)\r\n            anime({\r\n              targets: [\r\n                document.getElementById('node'.concat((node.row - 1) * Math.floor(window.innerWidth / 20) + node.col)),\r\n                document.getElementById('node'.concat((node.row + 1) * Math.floor(window.innerWidth / 20) + node.col)),\r\n                document.getElementById('node'.concat(node.row * Math.floor(window.innerWidth / 20) + node.col + 1)),\r\n                document.getElementById('node'.concat(node.row * Math.floor(window.innerWidth / 20) + node.col - 1)) \r\n              ],\r\n              scale: [\r\n                { value: 1.1, easing: 'easeOutSine', duration: 500 },\r\n                { value: 1, easing: 'easeInOutQuad', duration: 1200 }\r\n              ],\r\n              background: [\r\n                { value: '#0CECDD', easing: 'linear', duration: 500 },\r\n                { value: '#88FFF7', easing: 'linear', duration: 500 },\r\n              ],\r\n              borderRadius: [\r\n                { value: '20%', easing: 'linear', duration: 1000 },\r\n                { value: '0%', easing: 'linear', duration: 500 },\r\n              ],\r\n            })\r\n            return\r\n          }\r\n          if ((node.row === endingNode[0] && node.col === endingNode[1])) {\r\n            setIsMovingEnd(true)\r\n            return\r\n          }\r\n          var newGrid = [...grid]\r\n          var curNode = newGrid[node.row][node.col]\r\n          curNode.isWall = !node.isWall\r\n          newGrid[node.row][node.col] = curNode\r\n          setGrid(newGrid)\r\n          setIsMousePressed(true)\r\n        }}\r\n        onMouseEnter={() => {\r\n          if (isMovingStart) {\r\n            if ((node.row === endingNode[0] && node.col === endingNode[1])) { return }\r\n            if (node.isWall) {\r\n              var newGrid = [...grid]\r\n              var curNode = newGrid[node.row][node.col]\r\n              curNode.isWall = !node.isWall\r\n              newGrid[node.row][node.col] = curNode\r\n              setGrid(newGrid)\r\n            }\r\n            setStartingNode([node.row, node.col])\r\n\r\n          }\r\n          if (isMovingEnd) {\r\n            if ((node.row === startingNode[0] && node.col === startingNode[1])) { return }\r\n            if (node.isWall) {\r\n              var newGrid = [...grid]\r\n              var curNode = newGrid[node.row][node.col]\r\n              curNode.isWall = !node.isWall\r\n              newGrid[node.row][node.col] = curNode\r\n              setGrid(newGrid)\r\n            }\r\n            setEndingNode([node.row, node.col])\r\n\r\n          }\r\n          if (isMousePressed) {\r\n            var newGrid = [...grid]\r\n            var curNode = newGrid[node.row][node.col]\r\n            curNode.isWall = !node.isWall\r\n            newGrid[node.row][node.col] = curNode\r\n            setGrid(newGrid)\r\n          }\r\n        }}\r\n        onMouseUp={() => {\r\n          if (isMovingStart) {\r\n            setIsMovingStart(false)\r\n          }\r\n          if (isMovingEnd) {\r\n            setIsMovingEnd(false)\r\n          }\r\n          if (isMousePressed) {\r\n            setIsMousePressed(false)\r\n          }\r\n        }}\r\n      >\r\n        {(node.isWall) ? (\r\n          <div style={{ width: 18, height: 18, backgroundColor: 'black' }} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {(node.row === startingNode[0] && node.col === startingNode[1]) ? (\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <div style={{ width: 18, height: 18, borderRadius: 18, backgroundColor: 'black' }} />\r\n            <div style={{ width: 12, height: 12, borderRadius: 12, backgroundColor: 'white', position: 'absolute' }} />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {(node.row === endingNode[0] && node.col === endingNode[1]) ? (\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <div style={{ width: 18, height: 18, borderRadius: 18, backgroundColor: 'red' }} />\r\n            <div style={{ width: 12, height: 12, borderRadius: 12, backgroundColor: 'green', position: 'absolute' }} />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function start() {\r\n    anime({\r\n      targets: '.node',\r\n      scale: [\r\n        { value: 1.1, easing: 'easeOutSine', duration: 500 },\r\n        { value: 1, easing: 'easeInOutQuad', duration: 1200 }\r\n      ],\r\n      background: [\r\n        { value: '#0CECDD', easing: 'linear', duration: 500 },\r\n        { value: '#88FFF7', easing: 'linear', duration: 500 },\r\n      ],\r\n      borderRadius: [\r\n        { value: '20%', easing: 'linear', duration: 1000 },\r\n        { value: '0%', easing: 'linear', duration: 500 },\r\n      ],\r\n      delay: anime.stagger(200, { grid: [Math.floor(window.innerWidth / 20), Math.floor((window.innerHeight - 200) / 20)] }),\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: window.innerHeight, overflow: 'hidden' }}>\r\n      <div style={{ height: 200, width: '100%', backgroundColor: 'teal' }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ width: 100 }}\r\n          onClick={() => {\r\n            start()\r\n          }}\r\n        >\r\n          Start\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ width: 100 }}\r\n          onClick={() => {\r\n            setGrid(blankGrid)\r\n            setStartingNode([Math.floor((window.innerHeight - 200) / 40), Math.floor(window.innerWidth / 80)])\r\n            setEndingNode([Math.floor((window.innerHeight - 200) / 40), Math.floor(window.innerWidth * 3 / 80)])\r\n          }}\r\n        >\r\n          Reset\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {renderGrid(grid)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}