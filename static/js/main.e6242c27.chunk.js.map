{"version":3,"sources":["pathFindingFunctions.js","createMazeFunctions.js","App.js","reportWebVitals.js","index.js"],"names":["getNeighbours","curNode","grid","node","neighbour","row","col","isWall","push","length","animateSearch","time","setTimeout","anime","targets","document","getElementById","concat","Math","floor","window","innerWidth","scale","value","easing","duration","background","borderRadius","animatePath","change","App","blankGrid","createGrid","useState","setGrid","isMousePressed","setIsMousePressed","innerHeight","startingNode","setStartingNode","endingNode","setEndingNode","isMovingStart","setIsMovingStart","isMovingEnd","setIsMovingEnd","grids","i","j","isStart","isEnd","createNode","className","id","style","width","height","border","display","justifyContent","alignItems","onMouseDown","newGrid","onMouseEnter","onMouseUp","backgroundColor","position","overflow","Button","variant","color","onClick","visitOrder","path","animateDijkstra","queue","visited","prev","result","found","visit","pre","splice","neighbours","cur","dijkstra","simpleRandomizeDepthFirstSearch","flexDirection","map","renderGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e6242c27.chunk.js","sourcesContent":["import anime from 'animejs/lib/anime.es'\r\nimport React from 'react'\r\n\r\nexport function getNeighbours(curNode, grid) {\r\n\tvar neighbour = []\r\n\r\n\tif (curNode.row > 0) {\r\n\t\tvar node = grid[curNode.row - 1][curNode.col]\r\n\t\tif (!node.isWall) {\r\n\t\t\tneighbour.push(node)\r\n\t\t}\r\n\t}\r\n\tif (curNode.col < grid[0].length - 1) {\r\n\t\tvar node = grid[curNode.row][curNode.col + 1]\r\n\t\tif (!node.isWall) {\r\n\t\t\tneighbour.push(node)\r\n\t\t}\r\n\t}\r\n\tif (curNode.row < grid.length - 1) {\r\n\t\tvar node = grid[curNode.row + 1][curNode.col]\r\n\t\tif (!node.isWall) {\r\n\t\t\tneighbour.push(node)\r\n\t\t}\r\n\t}\r\n\tif (curNode.col > 0) {\r\n\t\tvar node = grid[curNode.row][curNode.col - 1]\r\n\t\tif (!node.isWall) {\r\n\t\t\tneighbour.push(node)\r\n\t\t}\r\n\t}\r\n\treturn neighbour\r\n}\r\n\r\nexport function dijkstra(startingNode, endingNode, grid) {\r\n\tvar width = grid[0].length\r\n\tvar queue = [startingNode]\r\n\tvar visited = []\r\n\tvar prev = []\r\n\tvar result = []\r\n\tvar found = false\r\n\tvar path = []\r\n\tfor (var i = 0; i < grid.length; i++) {\r\n\t\tvar visit = []\r\n\t\tvar pre = []\r\n\t\tfor (var j = 0; j < width; j++) {\r\n\t\t\tvisit.push(false)\r\n\t\t\tpre.push(-1)\r\n\t\t}\r\n\t\tvisited.push(visit)\r\n\t\tprev.push(pre)\r\n\t}\r\n\twhile (queue.length > 0 && !found) {\r\n\t\tvar node = queue[0]\r\n\t\tqueue.splice(0, 1)\r\n\t\tvisited[node.row][node.col] = true\r\n\t\tvar neighbours = getNeighbours(node, grid)\r\n\t\tfor (var i = 0; i < neighbours.length; i++) {\r\n\t\t\tvar neighbour = neighbours[i]\r\n\t\t\tif (neighbour.row === endingNode[0] && neighbour.col === endingNode[1]) {\r\n\t\t\t\tresult.push(neighbour)\r\n\t\t\t\tfound = true\r\n\t\t\t\tprev[neighbour.row][neighbour.col] = node\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tif (!visited[neighbour.row][neighbour.col]) {\r\n\t\t\t\tqueue.push(neighbour)\r\n\t\t\t\tvisited[neighbour.row][neighbour.col] = true\r\n\t\t\t\tprev[neighbour.row][neighbour.col] = node\r\n\t\t\t\tresult.push(neighbour)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (found) {\r\n\t\tvar cur = result[result.length - 1]\r\n\t\tpath.push(cur)\r\n\t\twhile (cur != startingNode) {\r\n\t\t\tpath.push(cur)\r\n\t\t\tcur = prev[cur.row][cur.col]\r\n\t\t}\r\n\t\tpath.push(startingNode)\r\n\t}\r\n\treturn [result, path]\r\n}\r\n\r\nexport function animateDijkstra([visitOrder, path]) {\r\n\tfor (var i = 0; i <= visitOrder.length; i++) {\r\n\t\tif (i === visitOrder.length) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tfor (var j = path.length - 1; j >= 0; j--) {\r\n\t\t\t\t\tanimatePath(path[j], path.length - j)\r\n\t\t\t\t}\r\n\t\t\t}, 10 * i + 100)\r\n\t\t\treturn\r\n\t\t}\r\n\t\tvar node = visitOrder[i]\r\n\t\tanimateSearch(node, i)\r\n\t}\r\n}\r\n\r\nfunction animateSearch(node, time) {\r\n\tsetTimeout(() => {\r\n\t\tanime({\r\n\t\t\ttargets: document.getElementById(\"node\".concat(node.row * Math.floor(window.innerWidth / 20) + node.col)),\r\n\t\t\tscale: [\r\n\t\t\t\t{ value: 1.1, easing: 'easeOutSine', duration: 500 },\r\n\t\t\t\t{ value: 1, easing: 'easeInOutQuad', duration: 1200 }\r\n\t\t\t],\r\n\t\t\tbackground: [\r\n\t\t\t\t{ value: '#0CECDD', easing: 'linear', duration: 500 },\r\n\t\t\t\t{ value: '#88FFF7', easing: 'linear', duration: 500 },\r\n\t\t\t],\r\n\t\t\tborderRadius: [\r\n\t\t\t\t{ value: '20%', easing: 'linear', duration: 1000 },\r\n\t\t\t\t{ value: '0%', easing: 'linear', duration: 500 },\r\n\t\t\t],\r\n\t\t})\r\n\t}, 10 * time)\r\n}\r\n\r\nfunction animatePath(node, time) {\r\n\tsetTimeout(() => {\r\n\t\tanime({\r\n\t\t\ttargets: document.getElementById(\"node\".concat(node.row * Math.floor(window.innerWidth / 20) + node.col)),\r\n\t\t\tscale: [\r\n\t\t\t\t{ value: 1.1, easing: 'easeOutSine', duration: 500 },\r\n\t\t\t\t{ value: 1, easing: 'easeInOutQuad', duration: 1200 }\r\n\t\t\t],\r\n\t\t\tbackground: [\r\n\t\t\t\t{ value: '#FFD371', easing: 'linear', duration: 500 },\r\n\t\t\t\t{ value: '#FFF338', easing: 'linear', duration: 500 },\r\n\t\t\t],\r\n\t\t\tborderRadius: [\r\n\t\t\t\t{ value: '20%', easing: 'linear', duration: 1000 },\r\n\t\t\t\t{ value: '0%', easing: 'linear', duration: 500 },\r\n\t\t\t],\r\n\t\t})\r\n\t}, 50 * time)\r\n}\r\n\r\n\r\n","import { getNeighbours } from \"./pathFindingFunctions\";\r\nimport anime from 'animejs/lib/anime.es'\r\n\r\nexport function randomizeDepthFirstSearch(grid, setGrid) {\r\n  var visited = []\r\n  var queue = [grid[0][0]]\r\n  var order = []\r\n  var newGrid = [...grid]\r\n  for (var i = 0; i < grid.length; i++) {\r\n    var visit = []\r\n    for (var j = 0; j < grid[0].length; j++) {\r\n      visit.push(false)\r\n    }\r\n    visited.push(visit)\r\n  }\r\n  while (queue.length > 0) {\r\n    var node = queue[0]\r\n    queue.splice(0, 1)\r\n    var neighbours = getNeighbours(node)\r\n    var randIndex = Math.floor(Math.random() * 4)\r\n    newGrid[node.row][node.col].isWall = true\r\n    for (var i = 0; i < neighbours.length; i++) {\r\n      var neighbour = neighbours[i]\r\n      if (!visited[neighbour]) {\r\n        queue.push(neighbour)\r\n        visited[neighbour.row][neighbour.col] = true\r\n        order.push(neighbour)\r\n        newGrid[neighbour.row][neighbour.col].isWall = true\r\n      }\r\n    }\r\n  }\r\n  setGrid(newGrid)\r\n  return order\r\n}\r\n\r\nexport function simpleRandomizeDepthFirstSearch(grid, setGrid) {\r\n  var newGrid = [...grid]\r\n  var time = 0\r\n  for (var i = 0; i < grid[0].length; i++) {\r\n    change(0, i, time, newGrid)\r\n    newGrid[0][i].isWall = true\r\n    time++\r\n  }\r\n  for (var i = 1; i < grid.length; i++) {\r\n    change(i, grid[0].length - 1, time, newGrid)\r\n    newGrid[i][grid[0].length - 1].isWall = true\r\n    time++\r\n  }\r\n  for (var i = grid[0].length - 1; i >= 0; i--) {\r\n    change(grid.length - 1, i, time, newGrid)\r\n    newGrid[grid.length - 1][i].isWall = true\r\n    time++\r\n  }\r\n  for (var i = grid.length - 1; i >= 0; i--) {\r\n    newGrid[i][0].isWall = true\r\n    change(i, 0, time, newGrid)\r\n    time++\r\n  }\r\n  setTimeout(() => {\r\n    setGrid(newGrid)\r\n  }, 5 * time + 20)\r\n  return\r\n}\r\n\r\nfunction change(row, col, time, grid) {\r\n  setTimeout(() => {\r\n    anime({\r\n      targets: document.getElementById(\"node\".concat(row * grid[0].length + col)),\r\n      background: '#000000'\r\n    })\r\n  }, 5 * time)\r\n}\r\n","import './App.css';\r\nimport anime from 'animejs/lib/anime.es.js';\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { dijkstra, animateDijkstra } from './pathFindingFunctions';\r\nimport { simpleRandomizeDepthFirstSearch } from './createMazeFunctions'\r\n\r\nfunction App() {\r\n\r\n  const blankGrid = createGrid()\r\n  const [grid, setGrid] = useState(createGrid())\r\n  const [isMousePressed, setIsMousePressed] = useState(false)\r\n  const [startingNode, setStartingNode] = useState([Math.floor((window.innerHeight - 200) / 40), Math.floor(window.innerWidth / 80)])\r\n  const [endingNode, setEndingNode] = useState([Math.floor((window.innerHeight - 200) / 40), Math.floor(window.innerWidth * 3 / 80)])\r\n  const [isMovingStart, setIsMovingStart] = useState(false)\r\n  const [isMovingEnd, setIsMovingEnd] = useState(false)\r\n\r\n  function createGrid() {\r\n    var grids = []\r\n    for (var i = 0; i < Math.floor((window.innerHeight - 200) / 20); i++) {\r\n      var row = []\r\n      for (var j = 0; j < Math.floor(window.innerWidth / 20); j++) {\r\n        row.push({\r\n          row: i,\r\n          col: j,\r\n          isWall: false,\r\n          isStart: false,\r\n          isEnd: false\r\n        })\r\n      }\r\n      grids.push(row)\r\n    }\r\n    return grids\r\n  }\r\n\r\n  function renderGrid(grid) {\r\n    return (\r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        {grid.map((row) => {\r\n          return (\r\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n              {row.map(node => {\r\n                return createNode(node)\r\n              })}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function createNode(node) {\r\n    return (\r\n      <div\r\n        className='node'\r\n        id={\"node\".concat(Math.floor(window.innerWidth / 20) * node.row + node.col)}\r\n        style={{ width: 18, height: 18, border: '1px solid #7DEDFF', display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n        onMouseDown={() => {\r\n          if ((node.row === startingNode[0] && node.col === startingNode[1])) {\r\n            setIsMovingStart(true)\r\n            return\r\n          }\r\n          if ((node.row === endingNode[0] && node.col === endingNode[1])) {\r\n            setIsMovingEnd(true)\r\n            return\r\n          }\r\n          var newGrid = [...grid]\r\n          var curNode = newGrid[node.row][node.col]\r\n          curNode.isWall = !node.isWall\r\n          newGrid[node.row][node.col] = curNode\r\n          setGrid(newGrid)\r\n          setIsMousePressed(true)\r\n        }}\r\n        onMouseEnter={() => {\r\n          if (isMovingStart) {\r\n            if ((node.row === endingNode[0] && node.col === endingNode[1])) { return }\r\n            if (node.isWall) {\r\n              var newGrid = [...grid]\r\n              var curNode = newGrid[node.row][node.col]\r\n              curNode.isWall = !node.isWall\r\n              newGrid[node.row][node.col] = curNode\r\n              setGrid(newGrid)\r\n            }\r\n            setStartingNode([node.row, node.col])\r\n\r\n          }\r\n          if (isMovingEnd) {\r\n            if ((node.row === startingNode[0] && node.col === startingNode[1])) { return }\r\n            if (node.isWall) {\r\n              var newGrid = [...grid]\r\n              var curNode = newGrid[node.row][node.col]\r\n              curNode.isWall = !node.isWall\r\n              newGrid[node.row][node.col] = curNode\r\n              setGrid(newGrid)\r\n            }\r\n            setEndingNode([node.row, node.col])\r\n\r\n          }\r\n          if (isMousePressed) {\r\n            var newGrid = [...grid]\r\n            var curNode = newGrid[node.row][node.col]\r\n            curNode.isWall = !node.isWall\r\n            newGrid[node.row][node.col] = curNode\r\n            setGrid(newGrid)\r\n          }\r\n        }}\r\n        onMouseUp={() => {\r\n          if (isMovingStart) {\r\n            setIsMovingStart(false)\r\n          }\r\n          if (isMovingEnd) {\r\n            setIsMovingEnd(false)\r\n          }\r\n          if (isMousePressed) {\r\n            setIsMousePressed(false)\r\n          }\r\n\r\n        }}\r\n      >\r\n        {(node.isWall) ? (\r\n          <div style={{ width: 18, height: 18, backgroundColor: 'black' }} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {(node.row === startingNode[0] && node.col === startingNode[1]) ? (\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <div style={{ width: 18, height: 18, borderRadius: 18, backgroundColor: 'black' }} />\r\n            <div style={{ width: 12, height: 12, borderRadius: 12, backgroundColor: 'white', position: 'absolute' }} />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {(node.row === endingNode[0] && node.col === endingNode[1]) ? (\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <div style={{ width: 18, height: 18, borderRadius: 18, backgroundColor: 'red' }} />\r\n            <div style={{ width: 12, height: 12, borderRadius: 12, backgroundColor: 'green', position: 'absolute' }} />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: window.innerHeight, overflow: 'hidden' }}>\r\n      <div style={{ height: 200, width: '100%', backgroundColor: 'teal' }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ width: 100 }}\r\n          onClick={() => {\r\n            animateDijkstra(dijkstra(grid[startingNode[0]][startingNode[1]], endingNode, grid))\r\n          }}\r\n        >\r\n          Start\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ width: 100 }}\r\n          onClick={() => {\r\n            setGrid(blankGrid)\r\n            setStartingNode([Math.floor((window.innerHeight - 200) / 40), Math.floor(window.innerWidth / 80)])\r\n            setEndingNode([Math.floor((window.innerHeight - 200) / 40), Math.floor(window.innerWidth * 3 / 80)])\r\n            anime({\r\n              targets: '.node',\r\n              background: '#FFFFFF'\r\n            })\r\n          }}\r\n        >\r\n          Reset\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ width: 100 }}\r\n          onClick={() => {\r\n            simpleRandomizeDepthFirstSearch(grid, setGrid)\r\n          }}\r\n        >\r\n          Maze\r\n        </Button>\r\n      </div>\r\n\r\n      <div >\r\n        {renderGrid(grid)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}