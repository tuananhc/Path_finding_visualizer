{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","createGrid","grid","setGrid","x","y","mousePosition","setMousePosition","updateMousePosition","ev","clientX","clientY","useEffect","window","addEventListener","removeEventListener","useMousePosition","blankGrid","grids","i","Math","floor","innerHeight","row","j","innerWidth","push","col","isWall","isStart","isEnd","createWall","id","concat","style","width","height","backgroundColor","onMouseDown","newGrid","node","setIsMousePressed","onMouseEnter","isMousePressed","onMouseUp","createNode","className","border","overflow","Button","variant","color","onClick","anime","targets","scale","value","easing","duration","background","borderRadius","delay","stagger","map","display","flexDirection","renderGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe905ca5.chunk.js","sourcesContent":["import './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@material-ui/core'\nimport { render } from '@testing-library/react';\n\nconst useMousePosition = () => {\n  const [mousePosition, setMousePosition] = useState({ x: null, y: null });\n\n  const updateMousePosition = ev => {\n    setMousePosition({ x: ev.clientX, y: ev.clientY });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", updateMousePosition);\n\n    return () => window.removeEventListener(\"mousemove\", updateMousePosition);\n  }, []);\n\n  return mousePosition;\n};\n\nfunction App() {\n\n  const [grid, setGrid] = useState(createGrid())\n  const [startingNode, setStartingNode] = useState()\n  const [endingNode, setEndingNode] = useState()\n  const { x, y } = useMousePosition()\n  const blankGrid = createGrid()\n\n  function createGrid() {\n    var grids = []\n    for (var i = 0; i < Math.floor((window.innerHeight - 200) / 20); i++) {\n      var row = []\n      for (var j = 0; j < Math.floor(window.innerWidth / 20); j++) {\n        row.push({\n          row: i,\n          col: j,\n          isWall: false,\n          isStart: false,\n          isEnd: false\n        })\n      }\n      grids.push(row)\n    }\n    return grids\n  }\n\n  function renderGrid(grid) {\n    return (\n      <div>\n        {grid.map((row) => {\n          return (\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\n              {row.map(node => {\n                if (node.isWall) {\n                  return createWall(node.col, node.row)\n                } else {\n                  return createNode(node.col, node.row)\n                }\n              })}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  function createWall(col, row) {\n    return (\n      <div\n        id={\"node\".concat(col * row + col)}\n        style={{ width: 20, height: 20, backgroundColor: 'black' }}\n        onMouseDown={() => {\n          var newGrid = [...grid]\n          var node = newGrid[row][col]\n          node.isWall = !node.isWall\n          newGrid[row][col] = node\n          setGrid(newGrid)\n          setIsMousePressed(true)\n        }}\n        onMouseEnter={() => {\n          if (isMousePressed) {\n            var newGrid = [...grid]\n            var node = newGrid[row][col]\n            node.isWall = !node.isWall\n            newGrid[row][col] = node\n            setGrid(newGrid)\n          }\n        }}\n        onMouseUp={() => setIsMousePressed(false)}\n      />\n    )\n  }\n\n  const [isMousePressed, setIsMousePressed] = useState(false)\n\n  function createNode(col, row) {\n    return (\n      <div\n        className='node'\n        id={\"node\".concat(col * row + col)}\n        style={{ width: 18, height: 18, border: '1px solid #7DEDFF' }}\n        onMouseDown={() => {\n          var newGrid = [...grid]\n          var node = newGrid[row][col]\n          node.isWall = !node.isWall\n          newGrid[row][col] = node\n          setGrid(newGrid)\n          setIsMousePressed(true)\n        }}\n        onMouseEnter={() => {\n          if (isMousePressed) {\n            var newGrid = [...grid]\n            var node = newGrid[row][col]\n            node.isWall = !node.isWall\n            newGrid[row][col] = node\n            setGrid(newGrid)\n          }\n        }}\n        onMouseUp={() => setIsMousePressed(false)}\n      />\n    )\n  }\n\n  function start() {\n    anime({\n      targets: '.node',\n      scale: [\n        { value: 1.1, easing: 'easeOutSine', duration: 500 },\n        { value: 1, easing: 'easeInOutQuad', duration: 1200 }\n      ],\n      background: [\n        { value: '#0CECDD', easing: 'linear', duration: 500 },\n        { value: '#88FFF7', easing: 'linear', duration: 500 },\n      ],\n      borderRadius: [\n        { value: '20%', easing: 'linear', duration: 1000 },\n        { value: '0%', easing: 'linear', duration: 500 },\n      ],\n      delay: anime.stagger(200, { grid: [Math.floor(window.innerWidth / 20), Math.floor((window.innerHeight - 200) / 20)] }),\n    });\n  }\n\n  return (\n    <div style={{ height: window.innerHeight, overflow: 'hidden' }}>\n      <div style={{ height: 200, width: '100%', backgroundColor: 'teal' }}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          style={{ width: 100 }}\n          onClick={() => {\n            start()\n          }}\n        >\n          Start\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          style={{ width: 100 }}\n          onClick={() => {\n            setGrid(blankGrid)\n          }}\n        >\n          Reset\n        </Button>\n        {x} : {y}\n      </div>\n      <div>\n        {renderGrid(grid)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}